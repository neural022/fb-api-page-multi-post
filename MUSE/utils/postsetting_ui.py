# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'postsetting.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from .config import *
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_PostSettingDialog(object):
    def setupUi(self, PostSettingDialog):
        PostSettingDialog.setObjectName("PostSettingDialog")
        PostSettingDialog.resize(580, 279)
        self.tableWidget = QtWidgets.QTableWidget(PostSettingDialog)
        self.tableWidget.setGeometry(QtCore.QRect(20, 50, 441, 211))
        self.tableWidget.setFrameShadow(QtWidgets.QFrame.Plain)
        self.tableWidget.setAutoScroll(True)
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget.setRowCount(0)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(150)
        self.tableWidget.horizontalHeader().setMinimumSectionSize(25)
        self.save_button = QtWidgets.QPushButton(PostSettingDialog)
        self.save_button.setGeometry(QtCore.QRect(480, 240, 75, 23))
        self.save_button.setObjectName("save_button")
        self.label = QtWidgets.QLabel(PostSettingDialog)
        self.label.setGeometry(QtCore.QRect(20, 20, 201, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label.setFont(font)
        self.label.setObjectName("label")

        self.retranslateUi(PostSettingDialog)
        QtCore.QMetaObject.connectSlotsByName(PostSettingDialog)

    def retranslateUi(self, PostSettingDialog):
        _translate = QtCore.QCoreApplication.translate
        PostSettingDialog.setWindowTitle(_translate("PostSettingDialog", "設置發文對象"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("PostSettingDialog", "選取發文對象(粉專名稱)"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("PostSettingDialog", "page id"))
        self.save_button.setText(_translate("PostSettingDialog", "儲存"))
        self.label.setText(_translate("PostSettingDialog", "請勾選需要同步發文的粉絲專頁"))




class PostSettingDialog(QtWidgets.QDialog, Ui_PostSettingDialog):
    def __init__(self, target_page_ids, parent=None):
        super(PostSettingDialog, self).__init__(parent)
        self.setupUi(self)
        
        self.config = Config("./config/config.json")
        self.target_page_ids = self.config.load_config()['select_pages']
        
        # 連接saveButton的點擊事件到self.save_and_close方法
        self.save_button.clicked.connect(self.save_and_close)
        
        # 連接 itemSelectionChanged 事件
        #self.tableWidget.itemSelectionChanged.connect(self.handle_row_selection)
        self.tableWidget.cellClicked.connect(self.handle_cell_click)

    

    def populate_table(self, pages_data):
        self.tableWidget.setRowCount(len(pages_data))
        for row, page in enumerate(pages_data):
            # Create a QWidget as a container
            container_widget = QtWidgets.QWidget()
            layout = QtWidgets.QHBoxLayout(container_widget)
            layout.setAlignment(QtCore.Qt.AlignCenter) # center the contents

            # Create QCheckBox and QLabel
            checkbox = QtWidgets.QCheckBox()
            label = QtWidgets.QLabel(page['name'])
            
            # Check if this page's id is in self.target_page_ids
            if page['id'] in self.target_page_ids:
                checkbox.setChecked(True)  # Check the checkbox if it is in self.target_page_ids
            
            # Add them to layout
            layout.addWidget(checkbox)
            layout.addWidget(label)
            layout.setContentsMargins(0, 0, 0, 0)  # remove margins if any

            # Set the container QWidget as the cell widget
            self.tableWidget.setCellWidget(row, 0, container_widget)
            
            # Fill page id
            page_id_item = QtWidgets.QTableWidgetItem(page['id'])
            self.tableWidget.setItem(row, 1, page_id_item)

    def handle_cell_click(self, row, column):
        checkbox_widget = self.tableWidget.cellWidget(row, 0)
        checkbox = checkbox_widget.findChild(QtWidgets.QCheckBox)

        # 檢查 checkbox 的當前狀態並反轉它
        if checkbox.checkState() == QtCore.Qt.Checked:
            checkbox.setCheckState(QtCore.Qt.Unchecked)
        else:
            checkbox.setCheckState(QtCore.Qt.Checked)
                
    def save_and_close(self, reselect=False):
        # Clear previous selections
        self.target_page_ids.clear()

        for row in range(self.tableWidget.rowCount()):
            checkbox_widget = self.tableWidget.cellWidget(row, 0)
            # get the QCheckBox
            checkbox = checkbox_widget.findChild(QtWidgets.QCheckBox)
            if checkbox.checkState() == QtCore.Qt.Checked:
                id_item = self.tableWidget.item(row, 1)
                  # Step 2: Collect ID of the checked row
                self.target_page_ids.append(id_item.text())
        
        print(self.target_page_ids)
        data = self.config.load_config()
        data['select_pages'] = self.target_page_ids
        self.config.save_config(data)
        self.close()