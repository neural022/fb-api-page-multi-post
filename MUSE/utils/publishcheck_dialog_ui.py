# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'publishcheckdialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from .fbpy_graph_api import FacebookPageAPI, FacebookError
import os
import threading

class Ui_PublishCheckDialog(object):
    def setupUi(self, PublishCheckDialog):
        PublishCheckDialog.setObjectName("PublishCheckDialog")
        PublishCheckDialog.resize(400, 140)
        self.publish_check_buttonBox = QtWidgets.QDialogButtonBox(PublishCheckDialog)
        self.publish_check_buttonBox.setGeometry(QtCore.QRect(120, 100, 156, 23))
        self.publish_check_buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.publish_check_buttonBox.setObjectName("publish_check_buttonBox")
        self.publish_check_label = QtWidgets.QLabel(PublishCheckDialog)
        self.publish_check_label.setGeometry(QtCore.QRect(30, 30, 351, 51))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(False)
        font.setKerning(True)
        self.publish_check_label.setFont(font)
        self.publish_check_label.setAutoFillBackground(True)
        self.publish_check_label.setObjectName("publish_check_label")

        self.retranslateUi(PublishCheckDialog)
        QtCore.QMetaObject.connectSlotsByName(PublishCheckDialog)

    def retranslateUi(self, PublishCheckDialog):
        _translate = QtCore.QCoreApplication.translate
        PublishCheckDialog.setWindowTitle(_translate("PublishCheckDialog", "發布貼文確認"))
        self.publish_check_label.setText(_translate("PublishCheckDialog", "您確定要送出嗎？一但送出無法更改"))

class PublishCheckDialog(QtWidgets.QDialog, Ui_PublishCheckDialog):
    def __init__(self, target_page_ids, pages_data, post_text, post_image, logger, api_version, parent=None):
        super(PublishCheckDialog, self).__init__(parent)
        self.setupUi(self)
        self.api_version = api_version
        self.logger = logger

        has_text, has_image = self.determine_post_type(post_text, post_image)
        self.post_text_only = has_text and not has_image
        self.post_image_only = not has_text and has_image
        self.post_both = has_text and has_image

        self.publish_check_buttonBox.accepted.connect(lambda:self.start_publish_thread(target_page_ids, pages_data, post_text, post_image))
        self.publish_check_buttonBox.rejected.connect(self.cancel_post)
    
    
    def determine_post_type(self, post_text, post_image):
        has_text = bool(post_text.strip())
        has_image = bool(post_image.strip()) and os.path.exists(post_image.strip())
        return has_text, has_image

    def start_publish_thread(self, target_page_ids, pages_data, post_text, post_image):
        self.logger.info(f"發送中... 若檔案較大須等待較長時間")
        publish_thread = threading.Thread(target=self.publish_post, args=(target_page_ids, pages_data, post_text, post_image))
        
        publish_thread.start()
        self.accept()

    def publish_post(self, target_page_ids, managed_pages, post_text=None, post_image=None):
            try:
                for page_data in managed_pages:
                    if page_data['id'] in target_page_ids:
                        page = FacebookPageAPI(page_data['access_token'], api_version=self.api_version)

                        if self.post_text_only:
                            # 純發文字
                            page.post(message=post_text)
                            self.logger.info(f"Posted to page {page_data['name']} successfully!")
                        elif self.post_image_only:
                            # 純發圖片
                            page.upload_image(post_image, publish=True)
                            self.logger.info(f"Posted to page {page_data['name']} successfully!")
                        elif self.post_both:
                            # 圖片加文字
                            attached_media = page.upload_image(post_image, publish=False)
                            page.post(message=post_text, attached_media=attached_media)
                            self.logger.info(f"Posted to page {page_data['name']} successfully!")
                        else:
                            self.logger.info(f"Posted to page failed. Content is empty！")

            except FacebookError as e:
                self.logger.error(f"Error occurred while interacting with Facebook: {e}")
            except FileNotFoundError:
                self.logger.error(f"Error: Specified image path not found.")

    def cancel_post(self):
        self.close()

